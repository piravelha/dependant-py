start: decl* term

?decl: data_decl | var_decl

data_decl: "data" TYPE_NAME data_params ":" term "where" data_cons "end"
data_params: data_param*
data_param: "(" NAME ":" term ")"
data_cons: data_con+
data_con: NAME ":" term

var_decl: NAME "::" term NAME "=" term

?term: "\\" NAME ":" term "." term -> abstraction
     | "(" NAME ":" term ")" "->" term -> dependant_type
     | type_func
     | application
     | atom

?type_func: application "->" type_func | application
?application: application term | atom

?atom: NAME -> var
    | NAT -> nat
    | "(" term ")"
    | "?" -> wildcard
    | TYPE_NAME term* -> type_constructor

NAT: /\d+/
NAME: /[a-z_]\w*/
TYPE_NAME: /[A-Z]\w*/

%ignore /\s+/
